//
// This file is autogenerated
//

//
//  Rekey.swift
//  Keybase
//  Copyright Â© 2016 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// Rekey
//


public class TLF {

	public let id: String?
	public let name: String?
	public let writers: [String]?
	public let readers: [String]?
	public let isPrivate: Bool?

  public init(id: String, name: String, writers: [String], readers: [String], isPrivate: Bool) {
    self.id = id
		self.name = name
		self.writers = writers
		self.readers = readers
		self.isPrivate = isPrivate
  }

  public class func fromJSON(_ json: JSON) -> TLF {
    return TLF(id: json["id"].stringValue, name: json["name"].stringValue, writers: String.fromJSONArray(json["writers"].arrayValue), readers: String.fromJSONArray(json["readers"].arrayValue), isPrivate: json["isPrivate"].boolValue)
  }

  public class func fromJSONArray(_ json: [JSON]) -> [TLF] {
    return json.map { fromJSON($0) }
  }

}



public class ProblemTLF {

	public let tlf: TLF?
	public let score: Int?
	public let solution_kids: [String]?

  public init(tlf: TLF, score: Int, solution_kids: [String]) {
    self.tlf = tlf
		self.score = score
		self.solution_kids = solution_kids
  }

  public class func fromJSON(_ json: JSON) -> ProblemTLF {
    return ProblemTLF(tlf: TLF.fromJSON(json["tlf"]), score: json["score"].intValue, solution_kids: String.fromJSONArray(json["solution_kids"].arrayValue))
  }

  public class func fromJSONArray(_ json: [JSON]) -> [ProblemTLF] {
    return json.map { fromJSON($0) }
  }

}



public class ProblemSet {

	public let user: User?
	public let kid: String?
	public let tlfs: [ProblemTLF]?

  public init(user: User, kid: String, tlfs: [ProblemTLF]) {
    self.user = user
		self.kid = kid
		self.tlfs = tlfs
  }

  public class func fromJSON(_ json: JSON) -> ProblemSet {
    return ProblemSet(user: User.fromJSON(json["user"]), kid: json["kid"].stringValue, tlfs: ProblemTLF.fromJSONArray(json["tlfs"].arrayValue))
  }

  public class func fromJSONArray(_ json: [JSON]) -> [ProblemSet] {
    return json.map { fromJSON($0) }
  }

}



public class ProblemSetDevices {

	public let problemSet: ProblemSet?
	public let devices: [Device]?

  public init(problemSet: ProblemSet, devices: [Device]) {
    self.problemSet = problemSet
		self.devices = devices
  }

  public class func fromJSON(_ json: JSON) -> ProblemSetDevices {
    return ProblemSetDevices(problemSet: ProblemSet.fromJSON(json["problemSet"]), devices: Device.fromJSONArray(json["devices"].arrayValue))
  }

  public class func fromJSONArray(_ json: [JSON]) -> [ProblemSetDevices] {
    return json.map { fromJSON($0) }
  }

}


public enum Outcome: Int {
	case none = 0
	case fixed = 1
	case ignored = 2
}


public class RevokeWarning {

	public let endangeredTLFs: [TLF]?

  public init(endangeredTLFs: [TLF]) {
    self.endangeredTLFs = endangeredTLFs
  }

  public class func fromJSON(_ json: JSON) -> RevokeWarning {
    return RevokeWarning(endangeredTLFs: TLF.fromJSONArray(json["endangeredTLFs"].arrayValue))
  }

  public class func fromJSONArray(_ json: [JSON]) -> [RevokeWarning] {
    return json.map { fromJSON($0) }
  }

}

