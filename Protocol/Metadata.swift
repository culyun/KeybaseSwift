//
// This file is autogenerated
//

//
//  Metadata.swift
//  Keybase
//  Copyright Â© 2015 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// Metadata
//


public class KeyHalf {

	public let user: String
	public let deviceKID: String
	public let key: NSData

  public init(user: String, deviceKID: String, key: NSData) {
    self.user = user
		self.deviceKID = deviceKID
		self.key = key
  }

  public class func fromJSON(json: JSON) -> KeyHalf {
    return KeyHalf(user: json["user"].stringValue, deviceKID: json["deviceKID"].stringValue, key: json["key"].object as! NSData)
  }

  public class func fromJSONArray(json: [JSON]) -> [KeyHalf] {
    return json.map { fromJSON($0) }
  }
}


public class MDBlock {

	public let version: Int
	public let timestamp: Int64
	public let block: NSData

  public init(version: Int, timestamp: Int64, block: NSData) {
    self.version = version
		self.timestamp = timestamp
		self.block = block
  }

  public class func fromJSON(json: JSON) -> MDBlock {
    return MDBlock(version: json["version"].intValue, timestamp: json["timestamp"].int64Value, block: json["block"].object as! NSData)
  }

  public class func fromJSONArray(json: [JSON]) -> [MDBlock] {
    return json.map { fromJSON($0) }
  }
}


public class MetadataResponse {

	public let folderID: String
	public let mdBlocks: [MDBlock]

  public init(folderID: String, mdBlocks: [MDBlock]) {
    self.folderID = folderID
		self.mdBlocks = mdBlocks
  }

  public class func fromJSON(json: JSON) -> MetadataResponse {
    return MetadataResponse(folderID: json["folderID"].stringValue, mdBlocks: MDBlock.fromJSONArray(json["mdBlocks"].arrayValue))
  }

  public class func fromJSONArray(json: [JSON]) -> [MetadataResponse] {
    return json.map { fromJSON($0) }
  }
}


public class MerkleRoot {

	public let version: Int
	public let root: NSData

  public init(version: Int, root: NSData) {
    self.version = version
		self.root = root
  }

  public class func fromJSON(json: JSON) -> MerkleRoot {
    return MerkleRoot(version: json["version"].intValue, root: json["root"].object as! NSData)
  }

  public class func fromJSONArray(json: [JSON]) -> [MerkleRoot] {
    return json.map { fromJSON($0) }
  }
}
