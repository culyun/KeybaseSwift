//
// This file is autogenerated
//

//
//  Kbfs.swift
//  Keybase
//  Copyright Â© 2015 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// Kbfs
//

public enum FSStatusCode: Int {
	case Start = 0
	case Finish = 1
	case Error = 2
}

public enum FSNotificationType: Int {
	case Encrypting = 0
	case Decrypting = 1
	case Signing = 2
	case Verifying = 3
	case Rekeying = 4
	case Connection = 5
}

public enum FSErrorType: Int {
	case AccessDenied = 0
	case UserNotFound = 1
	case RevokedDataDetected = 2
	case NotLoggedIn = 3
	case Timeout = 4
	case RekeyNeeded = 5
	case BadFolder = 6
	case NotImplemented = 7
	case OldVersion = 8
}


public class FSNotification {

	public let publicTopLevelFolder: Bool
	public let filename: String
	public let status: String
	public let statusCode: FSStatusCode
	public let notificationType: FSNotificationType
	public let errorType: FSErrorType
	public let params: [String: String]

  public init(publicTopLevelFolder: Bool, filename: String, status: String, statusCode: FSStatusCode, notificationType: FSNotificationType, errorType: FSErrorType, params: [String: String]) {
    self.publicTopLevelFolder = publicTopLevelFolder
		self.filename = filename
		self.status = status
		self.statusCode = statusCode
		self.notificationType = notificationType
		self.errorType = errorType
		self.params = params
  }

  public class func fromJSON(json: JSON) -> FSNotification {
    return FSNotification(publicTopLevelFolder: json["publicTopLevelFolder"].boolValue, filename: json["filename"].stringValue, status: json["status"].stringValue, statusCode: FSStatusCode(rawValue: json["statusCode"].intValue)!, notificationType: FSNotificationType(rawValue: json["notificationType"].intValue)!, errorType: FSErrorType(rawValue: json["errorType"].intValue)!, params: json["params"].dictionaryStringValue)
  }

  public class func fromJSONArray(json: [JSON]) -> [FSNotification] {
    return json.map { fromJSON($0) }
  }
}
