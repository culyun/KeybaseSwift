//
// This file is autogenerated
//

//
//  TlfKeys.swift
//  Keybase
//  Copyright Â© 2016 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// TlfKeys
//

public enum TLFIdentifyBehavior: Int {
	case defaultKbfs = 0
	case chatCLI = 1
	case chatGUI = 2
	case chatGUIStrict = 3
}

public typealias CanonicalTlfName = String

public class CryptKey {

	public let KeyGeneration: Int?
	public let Key: NSData?

  public init(KeyGeneration: Int, Key: NSData) {
    self.KeyGeneration = KeyGeneration
		self.Key = Key
  }

  public class func fromJSON(_ json: JSON) -> CryptKey {
    return CryptKey(KeyGeneration: json["KeyGeneration"].intValue, Key: json["Key"].object as! NSData)
  }

  public class func fromJSONArray(_ json: [JSON]) -> [CryptKey] {
    return json.map { fromJSON($0) }
  }

}



public class TLFBreak {

	public let breaks: [TLFIdentifyFailure]?

  public init(breaks: [TLFIdentifyFailure]) {
    self.breaks = breaks
  }

  public class func fromJSON(_ json: JSON) -> TLFBreak {
    return TLFBreak(breaks: TLFIdentifyFailure.fromJSONArray(json["breaks"].arrayValue))
  }

  public class func fromJSONArray(_ json: [JSON]) -> [TLFBreak] {
    return json.map { fromJSON($0) }
  }

}



public class TLFIdentifyFailure {

	public let user: User?
	public let breaks: IdentifyTrackBreaks??

  public init(user: User, breaks: IdentifyTrackBreaks?) {
    self.user = user
		self.breaks = breaks
  }

  public class func fromJSON(_ json: JSON) -> TLFIdentifyFailure {
    return TLFIdentifyFailure(user: User.fromJSON(json["user"]), breaks: IdentifyTrackBreaks.fromJSON(json["breaks"]))
  }

  public class func fromJSONArray(_ json: [JSON]) -> [TLFIdentifyFailure] {
    return json.map { fromJSON($0) }
  }

}



public class CanonicalTLFNameAndIDWithBreaks {

	public let tlfID: String?
	public let CanonicalName: String?
	public let breaks: TLFBreak?

  public init(tlfID: String, CanonicalName: String, breaks: TLFBreak) {
    self.tlfID = tlfID
		self.CanonicalName = CanonicalName
		self.breaks = breaks
  }

  public class func fromJSON(_ json: JSON) -> CanonicalTLFNameAndIDWithBreaks {
    return CanonicalTLFNameAndIDWithBreaks(tlfID: json["tlfID"].stringValue, CanonicalName: json["CanonicalName"].stringValue, breaks: TLFBreak.fromJSON(json["breaks"]))
  }

  public class func fromJSONArray(_ json: [JSON]) -> [CanonicalTLFNameAndIDWithBreaks] {
    return json.map { fromJSON($0) }
  }

}



public class GetTLFCryptKeysRes {

	public let nameIDBreaks: CanonicalTLFNameAndIDWithBreaks?
	public let CryptKeys: [CryptKey]?

  public init(nameIDBreaks: CanonicalTLFNameAndIDWithBreaks, CryptKeys: [CryptKey]) {
    self.nameIDBreaks = nameIDBreaks
		self.CryptKeys = CryptKeys
  }

  public class func fromJSON(_ json: JSON) -> GetTLFCryptKeysRes {
    return GetTLFCryptKeysRes(nameIDBreaks: CanonicalTLFNameAndIDWithBreaks.fromJSON(json["nameIDBreaks"]), CryptKeys: CryptKey.fromJSONArray(json["CryptKeys"].arrayValue))
  }

  public class func fromJSONArray(_ json: [JSON]) -> [GetTLFCryptKeysRes] {
    return json.map { fromJSON($0) }
  }

}



public class TLFQuery {

	public let tlfName: String?
	public let identifyBehavior: TLFIdentifyBehavior?

  public init(tlfName: String, identifyBehavior: TLFIdentifyBehavior) {
    self.tlfName = tlfName
		self.identifyBehavior = identifyBehavior
  }

  public class func fromJSON(_ json: JSON) -> TLFQuery {
    return TLFQuery(tlfName: json["tlfName"].stringValue, identifyBehavior: TLFIdentifyBehavior(rawValue: json["identifyBehavior"].intValue)!)
  }

  public class func fromJSONArray(_ json: [JSON]) -> [TLFQuery] {
    return json.map { fromJSON($0) }
  }

}

