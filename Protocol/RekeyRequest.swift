//
// This file is autogenerated
//

//
//  RekeyRequest.swift
//  Keybase
//  Copyright Â© 2016 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// Rekey
//

public class RekeyRequest: Request {

/*!
 ShowPendingRekeyStatus shows either pending gregor-initiated rekey harassments
 or nothing if none were pending.
 */
  public func showPendingRekeyStatus() throws {
    let args: [String: Any] = [String: Any]()
    _ = try self.sendRequest(method: "keybase.1.rekey.showPendingRekeyStatus", args: args)
  }

/*!
 GetPendingRekeyStatus returns the pending ProblemSetDevices.
 */
  public func getPendingRekeyStatus() throws -> ProblemSetDevices {
    let args: [String: Any] = [String: Any]()
    let response = try self.sendRequest(method: "keybase.1.rekey.getPendingRekeyStatus", args: args)
    try checkNull(response: response)
    return ProblemSetDevices.fromJSON(JSON(response))
  }

/*!
 DebugShowRekeyStatus is used by the CLI to kick off a "ShowRekeyStatus" window for
 the current user.
 */
  public func debugShowRekeyStatus() throws {
    let args: [String: Any] = [String: Any]()
    _ = try self.sendRequest(method: "keybase.1.rekey.debugShowRekeyStatus", args: args)
  }

/*!
 RekeyStatusFinish is called when work is completed on a given RekeyStatus window. The Outcome
 can be Fixed or Ignored.
 */
  public func rekeyStatusFinish() throws -> Outcome {
    let args: [String: Any] = [String: Any]()
    let response = try self.sendRequest(method: "keybase.1.rekey.rekeyStatusFinish", args: args)
    try checkNull(response: response)
    return Outcome(rawValue: JSON(response).intValue)!
  }

/*!
 RekeySync flushes the current rekey loop and gets to a good stopping point
 to assert state. Good for race-free testing, not very useful in production.
 Force overrides a long-snooze.
 */
  public func rekeySync(force: Bool) throws {
    let args: [String: Any] = ["force": force]
    _ = try self.sendRequest(method: "keybase.1.rekey.rekeySync", args: args)
  }

/*!
 GetRevokeWarning computes the TLFs that will be endangered if actingDevice
 revokes targetDevice.
 */
  public func getRevokeWarning(session: Int, actingDevice: String, targetDevice: String) throws -> RevokeWarning {
    let args: [String: Any] = ["session": NSNumber(value: session), "actingDevice": actingDevice, "targetDevice": targetDevice]
    let response = try self.sendRequest(method: "keybase.1.rekey.getRevokeWarning", args: args)
    try checkNull(response: response)
    return RevokeWarning.fromJSON(JSON(response))
  }

}
