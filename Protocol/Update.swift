//
// This file is autogenerated
//

//
//  Update.swift
//  Keybase
//  Copyright Â© 2015 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// Update
//


public class Asset {

	public let name: String
	public let url: String
	public let digest: String
	public let signature: String
	public let localPath: String

  public init(name: String, url: String, digest: String, signature: String, localPath: String) {
    self.name = name
		self.url = url
		self.digest = digest
		self.signature = signature
		self.localPath = localPath
  }

  public class func fromJSON(json: JSON) -> Asset {
    return Asset(name: json["name"].stringValue, url: json["url"].stringValue, digest: json["digest"].stringValue, signature: json["signature"].stringValue, localPath: json["localPath"].stringValue)
  }

  public class func fromJSONArray(json: [JSON]) -> [Asset] {
    return json.map { fromJSON($0) }
  }
}

public enum UpdateType: Int {
	case Normal = 0
	case Bugfix = 1
	case Critical = 2
}


public class Update {

	public let version: String
	public let name: String
	public let description: String
	public let instructions: String?
	public let type: UpdateType
	public let publishedAt: Int64?
	public let asset: Asset?

  public init(version: String, name: String, description: String, instructions: String?, type: UpdateType, publishedAt: Int64?, asset: Asset?) {
    self.version = version
		self.name = name
		self.description = description
		self.instructions = instructions
		self.type = type
		self.publishedAt = publishedAt
		self.asset = asset
  }

  public class func fromJSON(json: JSON) -> Update {
    return Update(version: json["version"].stringValue, name: json["name"].stringValue, description: json["description"].stringValue, instructions: json["instructions"].stringValue, type: UpdateType(rawValue: json["type"].intValue)!, publishedAt: json["publishedAt"].int64Value, asset: Asset.fromJSON(json["asset"]))
  }

  public class func fromJSONArray(json: [JSON]) -> [Update] {
    return json.map { fromJSON($0) }
  }
}


public class UpdateOptions {

	public let version: String
	public let platform: String
	public let destinationPath: String
	public let source: String
	public let URL: String
	public let channel: String
	public let force: Bool
	public let defaultInstructions: String
	public let signaturePath: String

  public init(version: String, platform: String, destinationPath: String, source: String, URL: String, channel: String, force: Bool, defaultInstructions: String, signaturePath: String) {
    self.version = version
		self.platform = platform
		self.destinationPath = destinationPath
		self.source = source
		self.URL = URL
		self.channel = channel
		self.force = force
		self.defaultInstructions = defaultInstructions
		self.signaturePath = signaturePath
  }

  public class func fromJSON(json: JSON) -> UpdateOptions {
    return UpdateOptions(version: json["version"].stringValue, platform: json["platform"].stringValue, destinationPath: json["destinationPath"].stringValue, source: json["source"].stringValue, URL: json["URL"].stringValue, channel: json["channel"].stringValue, force: json["force"].boolValue, defaultInstructions: json["defaultInstructions"].stringValue, signaturePath: json["signaturePath"].stringValue)
  }

  public class func fromJSONArray(json: [JSON]) -> [UpdateOptions] {
    return json.map { fromJSON($0) }
  }
}


public class UpdateResult {

	public let update: Update?

  public init(update: Update?) {
    self.update = update
  }

  public class func fromJSON(json: JSON) -> UpdateResult {
    return UpdateResult(update: Update.fromJSON(json["update"]))
  }

  public class func fromJSONArray(json: [JSON]) -> [UpdateResult] {
    return json.map { fromJSON($0) }
  }
}
