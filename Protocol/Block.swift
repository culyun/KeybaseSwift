//
// This file is autogenerated
//

//
//  Block.swift
//  Keybase
//  Copyright Â© 2016 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// Block
//


public class GetBlockRes {

	public let blockKey: String?
	public let buf: NSData?

  public init(blockKey: String, buf: NSData) {
    self.blockKey = blockKey
		self.buf = buf
  }

  public class func fromJSON(_ json: JSON) -> GetBlockRes {
    return GetBlockRes(blockKey: json["blockKey"].stringValue, buf: json["buf"].object as! NSData)
  }

  public class func fromJSONArray(_ json: [JSON]) -> [GetBlockRes] {
    return json.map { fromJSON($0) }
  }

}


public typealias BlockRefNonce = [UInt8] // Size: 8

public class BlockReference {

	public let bid: BlockIdCombo?
	public let nonce: NSData?
	public let chargedTo: String?

  public init(bid: BlockIdCombo, nonce: NSData, chargedTo: String) {
    self.bid = bid
		self.nonce = nonce
		self.chargedTo = chargedTo
  }

  public class func fromJSON(_ json: JSON) -> BlockReference {
    return BlockReference(bid: BlockIdCombo.fromJSON(json["bid"]), nonce: json["nonce"].object as! NSData, chargedTo: json["chargedTo"].stringValue)
  }

  public class func fromJSONArray(_ json: [JSON]) -> [BlockReference] {
    return json.map { fromJSON($0) }
  }

}



public class BlockReferenceCount {

	public let ref: BlockReference?
	public let liveCount: Int?

  public init(ref: BlockReference, liveCount: Int) {
    self.ref = ref
		self.liveCount = liveCount
  }

  public class func fromJSON(_ json: JSON) -> BlockReferenceCount {
    return BlockReferenceCount(ref: BlockReference.fromJSON(json["ref"]), liveCount: json["liveCount"].intValue)
  }

  public class func fromJSONArray(_ json: [JSON]) -> [BlockReferenceCount] {
    return json.map { fromJSON($0) }
  }

}



public class DowngradeReferenceRes {

	public let completed: [BlockReferenceCount]?
	public let failed: BlockReference?

  public init(completed: [BlockReferenceCount], failed: BlockReference) {
    self.completed = completed
		self.failed = failed
  }

  public class func fromJSON(_ json: JSON) -> DowngradeReferenceRes {
    return DowngradeReferenceRes(completed: BlockReferenceCount.fromJSONArray(json["completed"].arrayValue), failed: BlockReference.fromJSON(json["failed"]))
  }

  public class func fromJSONArray(_ json: [JSON]) -> [DowngradeReferenceRes] {
    return json.map { fromJSON($0) }
  }

}

