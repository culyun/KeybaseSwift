//
// This file is autogenerated
//

//
//  User.swift
//  Keybase
//  Copyright Â© 2015 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// User
//


public class Tracker {

	public let tracker: String
	public let status: Int
	public let mTime: Int64

  public init(tracker: String, status: Int, mTime: Int64) {
    self.tracker = tracker
		self.status = status
		self.mTime = mTime
  }

  public class func fromJSON(json: JSON) -> Tracker {
    return Tracker(tracker: json["tracker"].stringValue, status: json["status"].intValue, mTime: json["mTime"].int64Value)
  }

  public class func fromJSONArray(json: [JSON]) -> [Tracker] {
    return json.map { fromJSON($0) }
  }
}


public class TrackProof {

	public let proofType: String
	public let proofName: String
	public let idString: String

  public init(proofType: String, proofName: String, idString: String) {
    self.proofType = proofType
		self.proofName = proofName
		self.idString = idString
  }

  public class func fromJSON(json: JSON) -> TrackProof {
    return TrackProof(proofType: json["proofType"].stringValue, proofName: json["proofName"].stringValue, idString: json["idString"].stringValue)
  }

  public class func fromJSONArray(json: [JSON]) -> [TrackProof] {
    return json.map { fromJSON($0) }
  }
}


public class WebProof {

	public let hostname: String
	public let protocols: [String]

  public init(hostname: String, protocols: [String]) {
    self.hostname = hostname
		self.protocols = protocols
  }

  public class func fromJSON(json: JSON) -> WebProof {
    return WebProof(hostname: json["hostname"].stringValue, protocols: String.fromJSONArray(json["protocols"].arrayValue))
  }

  public class func fromJSONArray(json: [JSON]) -> [WebProof] {
    return json.map { fromJSON($0) }
  }
}


public class Proofs {

	public let social: [TrackProof]
	public let web: [WebProof]
	public let publicKeys: [PublicKey]

  public init(social: [TrackProof], web: [WebProof], publicKeys: [PublicKey]) {
    self.social = social
		self.web = web
		self.publicKeys = publicKeys
  }

  public class func fromJSON(json: JSON) -> Proofs {
    return Proofs(social: TrackProof.fromJSONArray(json["social"].arrayValue), web: WebProof.fromJSONArray(json["web"].arrayValue), publicKeys: PublicKey.fromJSONArray(json["publicKeys"].arrayValue))
  }

  public class func fromJSONArray(json: [JSON]) -> [Proofs] {
    return json.map { fromJSON($0) }
  }
}


public class UserSummary {

	public let uid: String
	public let username: String
	public let thumbnail: String
	public let idVersion: Int
	public let fullName: String
	public let bio: String
	public let proofs: Proofs
	public let sigIDDisplay: String
	public let trackTime: Int64

  public init(uid: String, username: String, thumbnail: String, idVersion: Int, fullName: String, bio: String, proofs: Proofs, sigIDDisplay: String, trackTime: Int64) {
    self.uid = uid
		self.username = username
		self.thumbnail = thumbnail
		self.idVersion = idVersion
		self.fullName = fullName
		self.bio = bio
		self.proofs = proofs
		self.sigIDDisplay = sigIDDisplay
		self.trackTime = trackTime
  }

  public class func fromJSON(json: JSON) -> UserSummary {
    return UserSummary(uid: json["uid"].stringValue, username: json["username"].stringValue, thumbnail: json["thumbnail"].stringValue, idVersion: json["idVersion"].intValue, fullName: json["fullName"].stringValue, bio: json["bio"].stringValue, proofs: Proofs.fromJSON(json["proofs"]), sigIDDisplay: json["sigIDDisplay"].stringValue, trackTime: json["trackTime"].int64Value)
  }

  public class func fromJSONArray(json: [JSON]) -> [UserSummary] {
    return json.map { fromJSON($0) }
  }
}


public class SearchComponent {

	public let key: String
	public let value: String
	public let score: Double

  public init(key: String, value: String, score: Double) {
    self.key = key
		self.value = value
		self.score = score
  }

  public class func fromJSON(json: JSON) -> SearchComponent {
    return SearchComponent(key: json["key"].stringValue, value: json["value"].stringValue, score: json["score"].doubleValue)
  }

  public class func fromJSONArray(json: [JSON]) -> [SearchComponent] {
    return json.map { fromJSON($0) }
  }
}


public class SearchResult {

	public let uid: String
	public let username: String
	public let components: [SearchComponent]
	public let score: Double

  public init(uid: String, username: String, components: [SearchComponent], score: Double) {
    self.uid = uid
		self.username = username
		self.components = components
		self.score = score
  }

  public class func fromJSON(json: JSON) -> SearchResult {
    return SearchResult(uid: json["uid"].stringValue, username: json["username"].stringValue, components: SearchComponent.fromJSONArray(json["components"].arrayValue), score: json["score"].doubleValue)
  }

  public class func fromJSONArray(json: [JSON]) -> [SearchResult] {
    return json.map { fromJSON($0) }
  }
}
