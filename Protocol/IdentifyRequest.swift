//
// This file is autogenerated
//

//
//  IdentifyRequest.swift
//  Keybase
//  Copyright Â© 2015 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// Identify
//

public class IdentifyRequest: Request {

/*!
 Resolve an assertion to a UID. On failure, resolves to an empty UID and returns
 an error.
 */
  public func resolve(assertion: String) throws -> String {
    let args: [String: AnyObject] = ["assertion": assertion]
    let response = try self.sendRequest("keybase.1.identify.Resolve", args: args)
    try checkNull(response)
    return JSON(response).stringValue
  }

/*!
 Resolve an assertion to a (UID,username). On failure, returns an error.
 */
  public func resolve2(assertion: String) throws -> User {
    let args: [String: AnyObject] = ["assertion": assertion]
    let response = try self.sendRequest("keybase.1.identify.Resolve2", args: args)
    try checkNull(response)
    return User.fromJSON(JSON(response))
  }

/*!
 Identify a user from a username or assertion (e.g. kbuser, twuser@twitter).
 If forceRemoteCheck is true, we force all remote proofs to be checked (otherwise a cache is used).
 */
  public func identify(userAssertion: String, forceRemoteCheck: Bool, useDelegateUI: Bool, reason: IdentifyReason, source: ClientType) throws -> IdentifyRes {
    let args: [String: AnyObject] = ["userAssertion": userAssertion, "forceRemoteCheck": forceRemoteCheck, "useDelegateUI": useDelegateUI, "reason": reason, "source": source.rawValue]
    let response = try self.sendRequest("keybase.1.identify.identify", args: args)
    try checkNull(response)
    return IdentifyRes.fromJSON(JSON(response))
  }

  public func identify2(uid: String, userAssertion: String, reason: IdentifyReason, useDelegateUI: Bool, alwaysBlock: Bool, noErrorOnTrackFailure: Bool, forceRemoteCheck: Bool, needProofSet: Bool, allowEmptySelfID: Bool, noSkipSelf: Bool) throws -> Identify2Res {
    let args: [String: AnyObject] = ["uid": uid, "userAssertion": userAssertion, "reason": reason, "useDelegateUI": useDelegateUI, "alwaysBlock": alwaysBlock, "noErrorOnTrackFailure": noErrorOnTrackFailure, "forceRemoteCheck": forceRemoteCheck, "needProofSet": needProofSet, "allowEmptySelfID": allowEmptySelfID, "noSkipSelf": noSkipSelf]
    let response = try self.sendRequest("keybase.1.identify.identify2", args: args)
    try checkNull(response)
    return Identify2Res.fromJSON(JSON(response))
  }

}
