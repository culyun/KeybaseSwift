//
// This file is autogenerated
//

//
//  UpdateUi.swift
//  Keybase
//  Copyright Â© 2015 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// UpdateUi
//

public enum FileType: Int {
	case Unknown = 0
	case Directory = 1
	case File = 2
}


public class FileDescriptor {

	public let name: String
	public let type: FileType

  public init(name: String, type: FileType) {
    self.name = name
		self.type = type
  }

  public class func fromJSON(json: JSON) -> FileDescriptor {
    return FileDescriptor(name: json["name"].stringValue, type: FileType(rawValue: json["type"].intValue)!)
  }

  public class func fromJSONArray(json: [JSON]) -> [FileDescriptor] {
    return json.map { fromJSON($0) }
  }
}


public class Process {

	public let pid: String
	public let command: String
	public let fileDescriptors: [FileDescriptor]

  public init(pid: String, command: String, fileDescriptors: [FileDescriptor]) {
    self.pid = pid
		self.command = command
		self.fileDescriptors = fileDescriptors
  }

  public class func fromJSON(json: JSON) -> Process {
    return Process(pid: json["pid"].stringValue, command: json["command"].stringValue, fileDescriptors: FileDescriptor.fromJSONArray(json["fileDescriptors"].arrayValue))
  }

  public class func fromJSONArray(json: [JSON]) -> [Process] {
    return json.map { fromJSON($0) }
  }
}

public enum UpdateAction: Int {
	case Update = 0
	case Skip = 1
	case Snooze = 2
	case Cancel = 3
}


public class UpdatePromptRes {

	public let action: UpdateAction
	public let alwaysAutoInstall: Bool
	public let snoozeUntil: Int64

  public init(action: UpdateAction, alwaysAutoInstall: Bool, snoozeUntil: Int64) {
    self.action = action
		self.alwaysAutoInstall = alwaysAutoInstall
		self.snoozeUntil = snoozeUntil
  }

  public class func fromJSON(json: JSON) -> UpdatePromptRes {
    return UpdatePromptRes(action: UpdateAction(rawValue: json["action"].intValue)!, alwaysAutoInstall: json["alwaysAutoInstall"].boolValue, snoozeUntil: json["snoozeUntil"].int64Value)
  }

  public class func fromJSONArray(json: [JSON]) -> [UpdatePromptRes] {
    return json.map { fromJSON($0) }
  }
}


public class UpdatePromptOptions {

	public let alwaysAutoInstall: Bool

  public init(alwaysAutoInstall: Bool) {
    self.alwaysAutoInstall = alwaysAutoInstall
  }

  public class func fromJSON(json: JSON) -> UpdatePromptOptions {
    return UpdatePromptOptions(alwaysAutoInstall: json["alwaysAutoInstall"].boolValue)
  }

  public class func fromJSONArray(json: [JSON]) -> [UpdatePromptOptions] {
    return json.map { fromJSON($0) }
  }
}

public enum UpdateAppInUseAction: Int {
	case Cancel = 0
	case Force = 1
	case Snooze = 2
	case KillProcesses = 3
}


public class UpdateAppInUseRes {

	public let action: UpdateAppInUseAction

  public init(action: UpdateAppInUseAction) {
    self.action = action
  }

  public class func fromJSON(json: JSON) -> UpdateAppInUseRes {
    return UpdateAppInUseRes(action: UpdateAppInUseAction(rawValue: json["action"].intValue)!)
  }

  public class func fromJSONArray(json: [JSON]) -> [UpdateAppInUseRes] {
    return json.map { fromJSON($0) }
  }
}


public class UpdateQuitRes {

	public let quit: Bool
	public let pid: Int
	public let applicationPath: String

  public init(quit: Bool, pid: Int, applicationPath: String) {
    self.quit = quit
		self.pid = pid
		self.applicationPath = applicationPath
  }

  public class func fromJSON(json: JSON) -> UpdateQuitRes {
    return UpdateQuitRes(quit: json["quit"].boolValue, pid: json["pid"].intValue, applicationPath: json["applicationPath"].stringValue)
  }

  public class func fromJSONArray(json: [JSON]) -> [UpdateQuitRes] {
    return json.map { fromJSON($0) }
  }
}
