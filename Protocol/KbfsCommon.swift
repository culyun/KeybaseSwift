//
// This file is autogenerated
//

//
//  KbfsCommon.swift
//  Keybase
//  Copyright Â© 2016 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// KbfsCommon
//

public enum FSStatusCode: Int {
	case start = 0
	case finish = 1
	case error = 2
}

public enum FSNotificationType: Int {
	case encrypting = 0
	case decrypting = 1
	case signing = 2
	case verifying = 3
	case rekeying = 4
	case connection = 5
	case mdReadSuccess = 6
	case fileCreated = 7
	case fileModified = 8
	case fileDeleted = 9
	case fileRenamed = 10
}

public enum FSErrorType: Int {
	case accessDenied = 0
	case userNotFound = 1
	case revokedDataDetected = 2
	case notLoggedIn = 3
	case timeout = 4
	case rekeyNeeded = 5
	case badFolder = 6
	case notImplemented = 7
	case oldVersion = 8
	case overQuota = 9
	case noSigChain = 10
	case tooManyFolders = 11
}


public class FSNotification {

	public let publicTopLevelFolder: Bool?
	public let filename: String?
	public let status: String?
	public let statusCode: FSStatusCode?
	public let notificationType: FSNotificationType?
	public let errorType: FSErrorType?
	public let params: [String: String]?
	public let writerUid: String?
	public let localTime: Int64?

  public init(publicTopLevelFolder: Bool, filename: String, status: String, statusCode: FSStatusCode, notificationType: FSNotificationType, errorType: FSErrorType, params: [String: String], writerUid: String, localTime: Int64) {
    self.publicTopLevelFolder = publicTopLevelFolder
		self.filename = filename
		self.status = status
		self.statusCode = statusCode
		self.notificationType = notificationType
		self.errorType = errorType
		self.params = params
		self.writerUid = writerUid
		self.localTime = localTime
  }

  public class func fromJSON(_ json: JSON) -> FSNotification {
    return FSNotification(publicTopLevelFolder: json["publicTopLevelFolder"].boolValue, filename: json["filename"].stringValue, status: json["status"].stringValue, statusCode: FSStatusCode(rawValue: json["statusCode"].intValue)!, notificationType: FSNotificationType(rawValue: json["notificationType"].intValue)!, errorType: FSErrorType(rawValue: json["errorType"].intValue)!, params: json["params"].dictionaryStringValue, writerUid: json["writerUid"].stringValue, localTime: json["localTime"].int64Value)
  }

  public class func fromJSONArray(_ json: [JSON]) -> [FSNotification] {
    return json.map { fromJSON($0) }
  }

}



public class FSEditListRequest {

	public let folder: Folder?
	public let requestID: Int?

  public init(folder: Folder, requestID: Int) {
    self.folder = folder
		self.requestID = requestID
  }

  public class func fromJSON(_ json: JSON) -> FSEditListRequest {
    return FSEditListRequest(folder: Folder.fromJSON(json["folder"]), requestID: json["requestID"].intValue)
  }

  public class func fromJSONArray(_ json: [JSON]) -> [FSEditListRequest] {
    return json.map { fromJSON($0) }
  }

}



public class FSSyncStatusRequest {

	public let requestID: Int?

  public init(requestID: Int) {
    self.requestID = requestID
  }

  public class func fromJSON(_ json: JSON) -> FSSyncStatusRequest {
    return FSSyncStatusRequest(requestID: json["requestID"].intValue)
  }

  public class func fromJSONArray(_ json: [JSON]) -> [FSSyncStatusRequest] {
    return json.map { fromJSON($0) }
  }

}



public class FSPathSyncStatus {

	public let publicTopLevelFolder: Bool?
	public let path: String?
	public let syncingBytes: Int64?
	public let syncingOps: Int64?
	public let syncedBytes: Int64?

  public init(publicTopLevelFolder: Bool, path: String, syncingBytes: Int64, syncingOps: Int64, syncedBytes: Int64) {
    self.publicTopLevelFolder = publicTopLevelFolder
		self.path = path
		self.syncingBytes = syncingBytes
		self.syncingOps = syncingOps
		self.syncedBytes = syncedBytes
  }

  public class func fromJSON(_ json: JSON) -> FSPathSyncStatus {
    return FSPathSyncStatus(publicTopLevelFolder: json["publicTopLevelFolder"].boolValue, path: json["path"].stringValue, syncingBytes: json["syncingBytes"].int64Value, syncingOps: json["syncingOps"].int64Value, syncedBytes: json["syncedBytes"].int64Value)
  }

  public class func fromJSONArray(_ json: [JSON]) -> [FSPathSyncStatus] {
    return json.map { fromJSON($0) }
  }

}



public class FSSyncStatus {

	public let totalSyncingBytes: Int64?
	public let totalSyncingOps: Int64?
	public let pathStatuses: [FSPathSyncStatus]?

  public init(totalSyncingBytes: Int64, totalSyncingOps: Int64, pathStatuses: [FSPathSyncStatus]) {
    self.totalSyncingBytes = totalSyncingBytes
		self.totalSyncingOps = totalSyncingOps
		self.pathStatuses = pathStatuses
  }

  public class func fromJSON(_ json: JSON) -> FSSyncStatus {
    return FSSyncStatus(totalSyncingBytes: json["totalSyncingBytes"].int64Value, totalSyncingOps: json["totalSyncingOps"].int64Value, pathStatuses: FSPathSyncStatus.fromJSONArray(json["pathStatuses"].arrayValue))
  }

  public class func fromJSONArray(_ json: [JSON]) -> [FSSyncStatus] {
    return json.map { fromJSON($0) }
  }

}

