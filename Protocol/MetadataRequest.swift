//
// This file is autogenerated
//

//
//  MetadataRequest.swift
//  Keybase
//  Copyright Â© 2016 Keybase. All rights reserved.
//

import Foundation
import SwiftyJSON



//
// Metadata
//

public class MetadataRequest: Request {

  public func getChallenge() throws -> ChallengeInfo {
    let args: [String: Any] = [String: Any]()
    let response = try self.sendRequest(method: "keybase.1.metadata.getChallenge", args: args)
    try checkNull(response: response)
    return ChallengeInfo.fromJSON(JSON(response))
  }

  public func authenticate(signature: String) throws -> Int {
    let args: [String: Any] = ["signature": signature]
    let response = try self.sendRequest(method: "keybase.1.metadata.authenticate", args: args)
    try checkNull(response: response)
    return JSON(response).intValue
  }

  public func putMetadata(mdBlock: MDBlock, readerKeyBundle: KeyBundle, writerKeyBundle: KeyBundle, logTags: [String: String]) throws {
    let args: [String: Any] = ["mdBlock": mdBlock, "readerKeyBundle": readerKeyBundle, "writerKeyBundle": writerKeyBundle, "logTags": logTags]
    _ = try self.sendRequest(method: "keybase.1.metadata.putMetadata", args: args)
  }

  public func getMetadata(folderID: String, folderHandle: NSData, branchID: String, unmerged: Bool, startRevision: Int64, stopRevision: Int64, logTags: [String: String]) throws -> MetadataResponse {
    let args: [String: Any] = ["folderID": folderID, "folderHandle": folderHandle, "branchID": branchID, "unmerged": unmerged, "startRevision": NSNumber(value: startRevision), "stopRevision": NSNumber(value: stopRevision), "logTags": logTags]
    let response = try self.sendRequest(method: "keybase.1.metadata.getMetadata", args: args)
    try checkNull(response: response)
    return MetadataResponse.fromJSON(JSON(response))
  }

  public func registerForUpdates(folderID: String, currRevision: Int64, logTags: [String: String]) throws {
    let args: [String: Any] = ["folderID": folderID, "currRevision": NSNumber(value: currRevision), "logTags": logTags]
    _ = try self.sendRequest(method: "keybase.1.metadata.registerForUpdates", args: args)
  }

  public func pruneBranch(folderID: String, branchID: String, logTags: [String: String]) throws {
    let args: [String: Any] = ["folderID": folderID, "branchID": branchID, "logTags": logTags]
    _ = try self.sendRequest(method: "keybase.1.metadata.pruneBranch", args: args)
  }

  public func putKeys(keyHalves: [KeyHalf], logTags: [String: String]) throws {
    let args: [String: Any] = ["keyHalves": keyHalves, "logTags": logTags]
    _ = try self.sendRequest(method: "keybase.1.metadata.putKeys", args: args)
  }

  public func getKey(keyHalfID: NSData, deviceKID: String, logTags: [String: String]) throws -> NSData {
    let args: [String: Any] = ["keyHalfID": keyHalfID, "deviceKID": deviceKID, "logTags": logTags]
    let response = try self.sendRequest(method: "keybase.1.metadata.getKey", args: args)
    try checkNull(response: response)
    return JSON(response).object as! NSData
  }

  public func deleteKey(uid: String, deviceKID: String, keyHalfID: NSData, logTags: [String: String]) throws {
    let args: [String: Any] = ["uid": uid, "deviceKID": deviceKID, "keyHalfID": keyHalfID, "logTags": logTags]
    _ = try self.sendRequest(method: "keybase.1.metadata.deleteKey", args: args)
  }

  public func truncateLock(folderID: String) throws -> Bool {
    let args: [String: Any] = ["folderID": folderID]
    let response = try self.sendRequest(method: "keybase.1.metadata.truncateLock", args: args)
    try checkNull(response: response)
    return JSON(response).boolValue
  }

  public func truncateUnlock(folderID: String) throws -> Bool {
    let args: [String: Any] = ["folderID": folderID]
    let response = try self.sendRequest(method: "keybase.1.metadata.truncateUnlock", args: args)
    try checkNull(response: response)
    return JSON(response).boolValue
  }

  public func getFolderHandle(folderID: String, signature: String, challenge: String) throws -> NSData {
    let args: [String: Any] = ["folderID": folderID, "signature": signature, "challenge": challenge]
    let response = try self.sendRequest(method: "keybase.1.metadata.getFolderHandle", args: args)
    try checkNull(response: response)
    return JSON(response).object as! NSData
  }

  public func getFoldersForRekey(deviceKID: String) throws {
    let args: [String: Any] = ["deviceKID": deviceKID]
    _ = try self.sendRequest(method: "keybase.1.metadata.getFoldersForRekey", args: args)
  }

  public func ping() throws {
    let args: [String: Any] = [String: Any]()
    _ = try self.sendRequest(method: "keybase.1.metadata.ping", args: args)
  }

  public func ping2() throws -> PingResponse {
    let args: [String: Any] = [String: Any]()
    let response = try self.sendRequest(method: "keybase.1.metadata.ping2", args: args)
    try checkNull(response: response)
    return PingResponse.fromJSON(JSON(response))
  }

  public func getLatestFolderHandle(folderID: String) throws -> NSData {
    let args: [String: Any] = ["folderID": folderID]
    let response = try self.sendRequest(method: "keybase.1.metadata.getLatestFolderHandle", args: args)
    try checkNull(response: response)
    return JSON(response).object as! NSData
  }

  public func getKeyBundles(folderID: String, writerBundleID: String, readerBundleID: String) throws -> KeyBundleResponse {
    let args: [String: Any] = ["folderID": folderID, "writerBundleID": writerBundleID, "readerBundleID": readerBundleID]
    let response = try self.sendRequest(method: "keybase.1.metadata.getKeyBundles", args: args)
    try checkNull(response: response)
    return KeyBundleResponse.fromJSON(JSON(response))
  }

  public func getMerkleRoot(treeID: MerkleTreeID, seqNo: Int64) throws -> MerkleRoot {
    let args: [String: Any] = ["treeID": treeID.rawValue, "seqNo": NSNumber(value: seqNo)]
    let response = try self.sendRequest(method: "keybase.1.metadata.getMerkleRoot", args: args)
    try checkNull(response: response)
    return MerkleRoot.fromJSON(JSON(response))
  }

  public func getMerkleRootLatest(treeID: MerkleTreeID) throws -> MerkleRoot {
    let args: [String: Any] = ["treeID": treeID.rawValue]
    let response = try self.sendRequest(method: "keybase.1.metadata.getMerkleRootLatest", args: args)
    try checkNull(response: response)
    return MerkleRoot.fromJSON(JSON(response))
  }

  public func getMerkleRootSince(treeID: MerkleTreeID, when: Int64) throws -> MerkleRoot {
    let args: [String: Any] = ["treeID": treeID.rawValue, "when": NSNumber(value: when)]
    let response = try self.sendRequest(method: "keybase.1.metadata.getMerkleRootSince", args: args)
    try checkNull(response: response)
    return MerkleRoot.fromJSON(JSON(response))
  }

  public func getMerkleNode(hash: String) throws -> NSData {
    let args: [String: Any] = ["hash": hash]
    let response = try self.sendRequest(method: "keybase.1.metadata.getMerkleNode", args: args)
    try checkNull(response: response)
    return JSON(response).object as! NSData
  }

}
